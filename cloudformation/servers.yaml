AWSTemplateFormatVersion: "2010-09-09"
Description: "Deplot the network infracture for the Highly Available Website"

Parameters:
  environment:
    Description: Environment name, used as a prefix for resources
    Type: String

  vpcCIDR:
    Description: CIRD IP range for the VPC (default - 10.0.0.0/16)
    Type: String
    Default: 10.0.0.0/16

  publicSubnet1Cidr:
    Description: CIRD IP range for the public subnet (Availability Zone 1) (default - 10.0.0.0/24)
    Type: String
    Default: 10.0.0.0/24

  publicSubnet2Cidr:
    Description: CIRD IP range for the public subnet (Availability Zone 2) (default - 10.0.1.0/24)
    Type: String
    Default: 10.0.1.0/24

  privateSubnet1Cidr:
    Description: CIRD IP range for the private subnet (Availability Zone 1) (default - 10.0.2.0/24)
    Type: String
    Default: 10.0.2.0/24

  privateSubnet2Cidr:
    Description: CIRD IP range for the private subnet (Availability Zone 2) (default - 10.0.3.0/24)
    Type: String
    Default: 10.0.3.0/24

  sshIp:
    Description: Ip to allow ssh connection from
    Type: String|Number|CommaDelimitedList
    Default: -

Resources:

# # ----------------------------------------------------------------------
# ------------------- VPC - IGW - IGW-Attachment
# Create a VPC with access to the internet
# # ----------------------------------------------------------------------

  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: environment
        Value: !Ref environment

  internetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: environment
        Value: !Ref environment

  internetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref internetGateway

# # ----------------------------------------------------------------------
# --------------------- Public Subnet Network
# 
# # ----------------------------------------------------------------------

  publicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref publicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${environment}-public-subnet-az-1"
        - Key: subnet-type
          Value: Public
  
  publicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref publicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${environment}-public-subnet-az-2"
        - Key: subnet-type
          Value: Public
  
  publicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${environment}-public-route-table"
  
  publicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref publicRouteTable
      GatewayId: !Ref internetGateway
  
  publicRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        !Ref publicRouteTable
      SubnetId: 
        !Ref publicSubnet1
  
  publicRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        !Ref publicRouteTable
      SubnetId:
        !Ref publicSubnet2
  
  natGateway1ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  
  natGateway2ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
  
  natGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref publicSubnet1
      AllocationId: !GetAtt natGateway1ElasticIP.AllocationId
      Tags:
        - Key: "Name"
          Value: !Sub "${environment}-nag-gateway-1"
  
  natGateway2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref publicSubnet2
      AllocationId: !GetAtt natGateway2ElasticIP.AllocationId
      Tags:
        - Key: "Name"
          Value: !Sub "${environment}-nag-gateway-2"

# # ----------------------------------------------------------------------
# ----- Private Subnet Network
# 
# # ----------------------------------------------------------------------

  privateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref publicSubnet2Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${environment}-private-subnet-az-1"
        - Key: subnet-type
          Value: Private
  
  privateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref publicSubnet2Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${environment}-private-subnet-az-2"
        - Key: subnet-type
          Value: Private
  
  privateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${environment}-private-route-table-1"
  
  privateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref privateRouteTable1
      NatGatewayId: !Ref natGateway1

  privateRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRouteTable1
      SubnetId: !Ref privateSubnet1
  
  privateRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${environment}-private-route-table-2"

  privateRoute2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref privateRouteTable2
      NatGatewayId: !Ref natGateway2

  privateRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRouteTable2
      SubnetId: !Ref privateSubnet2


# ----------------------------------------------------------------------
# ------------------ Network Security Configuration
# 
# ----------------------------------------------------------------------
  
  albSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub ${environment}-alb-two-way-http-traffic
      GroupDescription: "A security group that allows inbound & outbound http traffic"
      VpcId: !Ref vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'

  asgServerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub ${environment}-asg-server-sg
      GroupDescription: "Allows inbound web traffic (TCP ports 80 and 443) and inbound SSH traffic (TCP port 22) from Bastion Host."
      VpcId: !Ref vpc
      SecurityGroupIngress:
        - FromPort: 80
          ToPort: 80
          IpProtocol: "tcp"
          Description: "Allow HTTP traffic"
          SourceSecurityGroupId: !Ref albSG
        - FromPort: 22
          ToPort: 22
          IpProtocol: "tcp"
          Description: "Allow SSH traffic"
          DestinationSecurityGroupId: !Ref bastionHostSSH

  bastionHostSSH:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub ${environment}-bastion-server-sg
      GroupDescription: "Allows inbound SSH traffic (TCP port 22) from SSH Location."
      VpcId: !Ref vpc
      SecurityGroupIngress:
        - FromPort: 22
          ToPort: 22
          IpProtocol: "tcp"
          Description: "Allow SSH traffic"
          CidrIp: !Ref sshIp


# ----------------------------------------------------------------------
# ---------------- Outputs Configuration -------------------------------
# 
# ----------------------------------------------------------------------

Outputs
  vpcID:
    Description: reference to VPC ID
    Value: !Ref vp
    Export: 
      Name: !Sub $(environment)-vpc-id
  
  publicSubnet1:
    Description: Reference to public subnet 1
    Value: !Ref publicSubnet1
    Export: 
      Name: !Sub ${environment}-public-subnet-1

  publicSubnet2:
    Description: Reference to public subnet 2
    Value: !Ref publicSubnet2
    Export: 
      Name: !Sub ${environment}-public-subnet-2

  privateSubnet1:
    Description: Reference to private subnet 1
    Value: !Ref privateSubnet1
    Export: 
      Name: !Sub ${environment}-private-subnet-1
  
  privateSubnet2:
    Description: Reference to private subnet 2
    Value: !Ref privateSubnet2
    Export: 
      Name: !Sub ${environment}-private-subnet-2

  loadBalancerSG:
    Description: Reference to the Load Balancer SecurityGroup
    Value: !Ref albSG
    Export: 
      Name: !Sub ${environment}-alb-sg

  autoSclaingGroupSG:
    Description: Reference to the SG if the AustoScaling Group
    Value: !Ref asgServerSG
    Export: 
      Name: !Sub ${environment}-asg-server-sg

  bastionHostSG:
    Description: Reference to the SG of hte bastion Host
    Value: !Ref bastionHostSG
    Export:
      Name: !Sub ${environment}-bastion-sg


















# Parameters:
#   # Paramenters are entirely optional.
#   # but using them will make your cloudformation templates more reusable
#   # use them for things that may change over time, such as instance type,
#   # VPCs and so on.
# Resources:
#   # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
#   # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
#   # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
#   ProfileWithRolesForOurApp:
#     Type: AWS::IAM::InstanceProfile
#     Properties:
#       Roles:
#         - UdacityS3ReadOnlyEC2
# Outputs:
#   # This is also optional.
#   # Bonus points for useful outputs!
#   # for example, if you create a Load Balancer
#   # it's nice to output the URL to it here, so that we don't have to go to the console to get it.

# # Sample UserData
# # When creating your Launch Configuration, you may need a UserData script
# # here's one that you can use for Ubuntu Linux that will:
# # Install Apache Web Server, Start it, and create an index.html that will be displayed
# # when you visit the IP address of this server with your web browser
# #Here it is:
# #
# #          #!/bin/bash
# #          apt-get update -y
# #          apt-get install apache2 -y
# #          systemctl start apache2.service
# #          cd /var/www/html
# #          echo "Udacity Demo Web Server Up and Running!" > index.html
