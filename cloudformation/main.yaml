AWSTemplateFormatVersion: "2010-09-09"
Description: "Deplot the network infracture for the Highly Available Website"

Parameters:
  environment:
    Description: Environment name, used as a prefix for resources
    Type: String

  vpcCidr:
    Description: vpc CIDR Range
    Type: String

  publicSubnet1Cidr:
    Description: public subnet CIDR Range in az-1
    Type: String

  publicSubnet2Cidr:
    Description: public subnet CIDR Range in az-2
    Type: String

  privateSubnet1Cidr:
    Description: private subnet CIDR Range in az-1
    Type: String

  privateSubnet2Cidr:
    Description: private subnet CIDR Range in az-2
    Type: String

  sshIp:
    Description: Ip to allow ssh connection from
    Type: String

  asgInstanceType:
    Description: Asg Instance Type(s)
    Type: String
    ConstraintDescription: only t2.nano/medium and t3.medium instances
    AllowedValues:
      - t2.micro
      - t2.medium
      - t3.medium

  asgImageId:
    Description: Web serve image id
    Type: AWS::EC2::Image::Id

  asgKeyPair:
    Description: Web serve image id
    Type: String

  asgVolumeSize:
    Description: Volume size for instance in ASG
    Type: String

  asgWebServerCount:
    Description: Desired amount of instances in asg
    Type: String

  maxCpuUtil:
    Description: Average CPU utilization
    Type: String

  maxRequestPerInstance:
    Description: Max no of requested per instance
    Type: String

  amazonLinuxAmi:
    Description: The latest AMZN Linux 2 AMI
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  # # ----------------------------------------------------------------------
  # ------------------- VPC - IGW - IGW-Attachment
  # Create a VPC with access to the internet
  # # ----------------------------------------------------------------------

  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: environment
          Value: !Ref environment

  internetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: environment
          Value: !Ref environment

  internetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref internetGateway

  # # ----------------------------------------------------------------------
  # --------------------- Public Subnet Network
  #
  # # ----------------------------------------------------------------------

  publicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref publicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${environment}-public-subnet-az-1"
        - Key: subnet-type
          Value: Public

  publicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref publicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${environment}-public-subnet-az-2"
        - Key: subnet-type
          Value: Public

  publicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${environment}-public-route-table"

  publicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref publicRouteTable
      GatewayId: !Ref internetGateway

  publicRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet1

  publicRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet2

  natGateway1ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  natGateway2ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  natGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref publicSubnet1
      AllocationId: !GetAtt natGateway1ElasticIP.AllocationId
      Tags:
        - Key: "Name"
          Value: !Sub "${environment}-nag-gateway-1"

  natGateway2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref publicSubnet2
      AllocationId: !GetAtt natGateway2ElasticIP.AllocationId
      Tags:
        - Key: "Name"
          Value: !Sub "${environment}-nag-gateway-2"

  # # ----------------------------------------------------------------------
  # ----- Private Subnet Network
  #
  # # ----------------------------------------------------------------------

  privateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref privateSubnet1Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${environment}-private-subnet-az-1"
        - Key: subnet-type
          Value: Private

  privateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref privateSubnet2Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${environment}-private-subnet-az-2"
        - Key: subnet-type
          Value: Private

  privateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${environment}-private-route-table-1"

  privateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref privateRouteTable1
      NatGatewayId: !Ref natGateway1

  privateRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRouteTable1
      SubnetId: !Ref privateSubnet1

  privateRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${environment}-private-route-table-2"

  privateRoute2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref privateRouteTable2
      NatGatewayId: !Ref natGateway2

  privateRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRouteTable2
      SubnetId: !Ref privateSubnet2

  # ----------------------------------------------------------------------
  # ------------------ Network Security Configuration
  #
  # ----------------------------------------------------------------------

  albSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub ${environment}-alb-two-way-http-traffic
      GroupDescription: "A security group that allows inbound & outbound http traffic"
      VpcId: !Ref vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"

  asgServerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub ${environment}-asg-server-sg
      GroupDescription: "Allows inbound web traffic (TCP ports 80 and 443) and inbound SSH traffic (TCP port 22) from Bastion Host."
      VpcId: !Ref vpc
      SecurityGroupIngress:
        - FromPort: 80
          ToPort: 80
          IpProtocol: "tcp"
          Description: "Allow HTTP traffic"
          SourceSecurityGroupId: !Ref albSG
        - FromPort: 22
          ToPort: 22
          IpProtocol: "tcp"
          Description: "Allow SSH traffic"
          SourceSecurityGroupId: !Ref bastionHostSSH

  bastionHostSSH:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub ${environment}-bastion-server-sg
      GroupDescription: "Allows inbound SSH traffic (TCP port 22) from SSH Location."
      VpcId: !Ref vpc
      SecurityGroupIngress:
        - FromPort: 22
          ToPort: 22
          IpProtocol: "tcp"
          Description: "Allow SSH traffic"
          CidrIp: !Ref sshIp

  # ----------------------------------------------------------------------
  # ---------------- IAM Permissions Configuration -----------------------
  #
  # ----------------------------------------------------------------------

  s3ReadOnlyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"

  ec2DescsribeInstancesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"

  asgInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref s3ReadOnlyRole

  bastionHostInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref ec2DescsribeInstancesRole

  # ----------------------------------------------------------------------
  # ---------------- BastionHost Configuration -------------------------------
  #
  # ----------------------------------------------------------------------

  bastionHost:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref asgKeyPair
      ImageId: !Ref amazonLinuxAmi
      InstanceType: !Ref asgInstanceType
      IamInstanceProfile: !Ref bastionHostInstanceProfile
      SecurityGroupIds:
        - !Ref bastionHostSSH
      SubnetId: !Ref publicSubnet1
      UserData: !Base64 |
        #!/bin/bash -ex
        apt-get update -y
        apt-get upgrade -y
      Tags:
        - Key: Name
          Value: BastionHost

  # ----------------------------------------------------------------------
  # ---------------- Auto Scaling Group Configuration --------------------
  #
  # ----------------------------------------------------------------------

  asgServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref asgImageId
      SecurityGroups:
        - !Ref asgServerSG
      InstanceType: !Ref asgInstanceType
      KeyName: !Ref asgKeyPair
      IamInstanceProfile: !Ref asgInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sdh"
          Ebs:
            VolumeSize: !Ref asgVolumeSize
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -ex
          apt-get update -y
          apt-get upgrade -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
          echo "<h1>Udacity Demo Web Server Up and Running\!</h1>" >> index.html
          EC2_AVAIL_ZONE=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
          echo "<h1>Hello World From $(hostname -f) in AZ $EC2_AVAIL_ZONE </h1>" >> index.html

  autoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: privateRoute1
    Properties:
      VPCZoneIdentifier:
        - !Ref privateSubnet1
        - !Ref privateSubnet2
      LaunchConfigurationName: !Ref asgServerLaunchConfig
      MinSize: "2"
      MaxSize: !Ref asgWebServerCount
      DesiredCapacity: !Ref asgWebServerCount
      TargetGroupARNs:
        - !Ref albTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${environment}-Instance
          PropagateAtLaunch: true

  avgCpuUtilPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref autoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref maxCpuUtil

  # albRequestCountPolicy:
  #   Type: AWS::AutoScaling::ScalingPolicy
  #   Properties:
  #     AutoScalingGroupName: !Ref autoScalingGroup
  #     PolicyType: TargetTrackingScaling
  #     TargetTrackingConfiguration:
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ALBRequestCountPerTarget
  #         ResourceLabel: !Join
  #           - "/"
  #           - - !GetAtt publicAlb.LoadBalancerFullName
  #             - !GetAtt albTargetGroup.TargetGroupFullName
  #       TargetValue: !Ref maxRequestPerInstance

  # ----------------------------------------------------------------------
  # ---------------- Load  Balancer Configuration--------------------------
  #
  # ----------------------------------------------------------------------

  albTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 7
      HealthyThresholdCount: 2
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref vpc

  publicAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: internetGatewayAttachment
    Properties:
      Subnets:
        - !Ref publicSubnet1
        - !Ref publicSubnet2
      SecurityGroups:
        - !Ref albSG
      Tags:
        - Key: Name
          Value: !Sub ${environment}-alb

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref albTargetGroup
      LoadBalancerArn: !Ref publicAlb
      Port: "80"
      Protocol: HTTP

  AlbListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref albTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref ALBListener
      Priority: 1

# ----------------------------------------------------------------------
# ---------------- Outputs Configuration -------------------------------
#
# ----------------------------------------------------------------------

Outputs:
  vpcID:
    Description: reference to VPC ID
    Value: !Ref vpc
    # Export:
    #   Name: !Sub ${environment}-vpc-id

  publicSubnet1:
    Description: Reference to public subnet 1
    Value: !Ref publicSubnet1
    # Export:
    #   Name: !Sub ${environment}-public-subnet-1

  publicSubnet2:
    Description: Reference to public subnet 2
    Value: !Ref publicSubnet2
    # Export:
    #   Name: !Sub ${environment}-public-subnet-2

  privateSubnet1:
    Description: Reference to private subnet 1
    Value: !Ref privateSubnet1
    # Export:
    #   Name: !Sub ${environment}-private-subnet-1

  privateSubnet2:
    Description: Reference to private subnet 2
    Value: !Ref privateSubnet2
    # Export:
    #   Name: !Sub ${environment}-private-subnet-2

  loadBalancerSG:
    Description: Reference to the Load Balancer SecurityGroup
    Value: !Ref albSG
    # Export:
    #   Name: !Sub ${environment}-alb-sg

  autoSclaingGroupSG:
    Description: Reference to the SG if the AustoScaling Group
    Value: !Ref asgServerSG
    # Export:
    #   Name: !Sub ${environment}-asg-server-sg

  bastionHostSG:
    Description: Reference to the SG of hte bastion Host
    Value: !Ref bastionHostSSH
    # Export:
    #   Name: !Sub ${environment}-bastion-sg

  albDNS:
    Description: The website URL
    Value: !Join ["", ["http://", !GetAtt publicAlb.DNSName]]
    # Export:
    #   Name: !Sub ${environment}-website-url"

  bastionHostpublicSSHAddress:
    Description: Bastions host public Dns to ssg
    Value: !Join ["", ["ec2-user@", !GetAtt bastionHost.PublicDnsName]]
# -----------------------------------
# -----------------------------------
# -----------------------------------

# Parameters:
#   # Paramenters are entirely optional.
#   # but using them will make your cloudformation templates more reusable
#   # use them for things that may change over time, such as instance type,
#   # VPCs and so on.
# Resources:
#   # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
#   # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
#   # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
#   ProfileWithRolesForOurApp:
#     Type: AWS::IAM::InstanceProfile
#     Properties:
#       Roles:
#         - UdacityS3ReadOnlyEC2
# Outputs:
#   # This is also optional.
#   # Bonus points for useful outputs!
#   # for example, if you create a Load Balancer
#   # it's nice to output the URL to it here, so that we don't have to go to the console to get it.

# # Sample UserData
# # When creating your Launch Configuration, you may need a UserData script
# # here's one that you can use for Ubuntu Linux that will:
# # Install Apache Web Server, Start it, and create an index.html that will be displayed
# # when you visit the IP address of this server with your web browser
# #Here it is:
# #
# #          #!/bin/bash
# #          apt-get update -y
# #          apt-get install apache2 -y
# #          systemctl start apache2.service
# #          cd /var/www/html
# #          echo "Udacity Demo Web Server Up and Running!" > index.html
